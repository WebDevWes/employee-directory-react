{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","utils/API.js","components/buttons/button.js","components/buttons/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","className","alt","name","src","image","email","location","onClick","removeEmployee","id","Wrapper","children","Title","axios","get","Button","handleButtonClick","type","class","SearchForm","onSubmit","filterEmployees","onChange","handleOnChange","placeholder","value","filter","App","state","employees","sortEmployees","employeeSort","sort","a","b","first","toLowerCase","setState","event","preventDefault","sortReverseEmployees","handleButtonClick2","target","filtered","employee","last","login","uuid","API","then","results","data","this","map","key","picture","medium","street","number","city","postcode","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+UA8BeA,MA1Bf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,SAEnC,yBAAKJ,UAAU,WACb,4BACE,4BACE,yCADF,IAC0BD,EAAMG,MAEhC,4BACE,0CADF,IAC2BH,EAAMM,OAEjC,4BACE,6CADF,IAC8BN,EAAMO,YAIxC,0BAAMC,QAAS,kBAAMR,EAAMS,eAAeT,EAAMU,KAAKT,UAAU,UAA/D,kB,MChBSU,MAJf,SAAiBX,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMY,W,MCG1BC,MAJf,SAAeb,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMY,W,iBCFvB,EAEC,WACZ,OAAOE,IAAMC,IAAI,iDCYNC,MAdf,SAAgBhB,GACd,OACE,yBAAKC,UAAU,UACb,4BACEO,QAASR,EAAMiB,kBACfC,KAAK,SACLjB,UAAWD,EAAMmB,OAEhBnB,EAAMY,YCaAQ,MArBf,SAAoBpB,GAClB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,0BAAMoB,SAAUrB,EAAMsB,iBACpB,2BACEC,SAAUvB,EAAMwB,eAChBvB,UAAU,eACViB,KAAK,OACLO,YAAY,iBACZC,MAAO1B,EAAM2B,OACbxB,KAAK,gBC0HJyB,E,4MA/HbC,MAAQ,CACNC,UAAW,GACXH,OAAQ,I,EAaVI,cAAgB,SAACD,GACf,IAAME,EAAY,YAAOF,GACzBE,EAAaC,MAAK,SAAUC,EAAGC,GAC7B,OAAID,EAAE/B,KAAKiC,MAAMC,cAAgBF,EAAEhC,KAAKiC,MAAMC,eAAuB,EACjEH,EAAE/B,KAAKiC,MAAMC,cAAgBF,EAAEhC,KAAKiC,MAAMC,cAAsB,EAC7D,KAET,EAAKC,SAAS,CAAER,UAAWE,K,EAI7Bf,kBAAoB,SAACsB,GACnBA,EAAMC,iBACN,EAAKT,cAAc,EAAKF,MAAMC,Y,EAIhCW,qBAAuB,SAACX,GACtB,IAAME,EAAY,YAAOF,GACzBE,EAAaC,MAAK,SAAUC,EAAGC,GAC7B,OAAID,EAAE/B,KAAKiC,MAAMC,cAAgBF,EAAEhC,KAAKiC,MAAMC,eAAuB,EACjEH,EAAE/B,KAAKiC,MAAMC,cAAgBF,EAAEhC,KAAKiC,MAAMC,cAAsB,EAC7D,KAET,EAAKC,SAAS,CAAER,UAAWE,K,EAI7BU,mBAAqB,SAACH,GACpBA,EAAMC,iBACN,EAAKC,qBAAqB,EAAKZ,MAAMC,Y,EAIvCN,eAAiB,SAACe,GAChB,IAAMb,EAAQa,EAAMI,OAAOjB,MACrBvB,EAAOoC,EAAMI,OAAOxC,KAC1B,EAAKmC,SAAL,eACGnC,EAAOuB,K,EAKZJ,gBAAkB,SAACiB,GAEjB,GADAA,EAAMC,iBACD,EAAKX,MAAMF,OAAhB,CAGA,IAAMiB,EAAW,EAAKf,MAAMC,UAAUH,QACpC,SAACkB,GAAD,OACEA,EAAS1C,KAAKiC,MAAMC,gBAAkB,EAAKR,MAAMF,OAAOU,eACxDQ,EAAS1C,KAAK2C,KAAKT,gBAAkB,EAAKR,MAAMF,OAAOU,iBAE3D,EAAKC,SAAS,CAAER,UAAWc,M,EAI7BnC,eAAiB,SAACC,GAEhB,IAAMoB,EAAY,EAAKD,MAAMC,UAAUH,QACrC,SAACkB,GAAD,OAAcA,EAASE,MAAMC,OAAStC,KAGxC,EAAK4B,SAAS,CAAER,e,kEAzEG,IAAD,OAElBmB,IAAmBC,MAAK,SAACC,GACvB,EAAKb,SAAS,CACZR,UAAWqB,EAAQC,KAAKD,e,+BAyEpB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACElC,kBAAmBoC,KAAKpC,kBACxBE,MAAM,iBAFR,kBAKA,kBAAC,EAAD,CACEF,kBAAmBoC,KAAKX,mBACxBvB,MAAM,gBAFR,mBAKA,kBAAC,EAAD,4BACA,kBAAC,EAAD,CACEK,eAAgB6B,KAAK7B,eACrBG,OAAQ0B,KAAKxB,MAAMF,OACnBL,gBAAiB+B,KAAK/B,kBAEvB+B,KAAKxB,MAAMC,UAAUwB,KAAI,SAACT,GAAD,OACxB,kBAAC,EAAD,CACEpC,eAAgB,EAAKA,eACrBC,GAAImC,EAASE,MAAMC,KACnBO,IAAKV,EAASE,MAAMC,KACpB7C,KAAM0C,EAAS1C,KAAKiC,MAAQ,IAAMS,EAAS1C,KAAK2C,KAChDzC,MAAOwC,EAASW,QAAQC,OACxBnD,MAAOuC,EAASvC,MAChBC,SACEsC,EAAStC,SAASmD,OAAOC,OACzB,IACAd,EAAStC,SAASmD,OAAOvD,KACzB,KACA0C,EAAStC,SAASqD,KAClB,KACAf,EAAStC,SAASsB,MAClB,IACAgB,EAAStC,SAASsD,mB,GAxHdC,aCIEC,QACW,cAA7BC,OAAOzD,SAAS0D,UAEe,UAA7BD,OAAOzD,SAAS0D,UAEhBD,OAAOzD,SAAS0D,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fbe39287.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// Reusable card component to be mapped\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Email:</strong> {props.email}\n          </li>\n          <li>\n            <strong>Location:</strong> {props.location}\n          </li>\n        </ul>\n      </div>\n      <span onClick={() => props.removeEmployee(props.id)} className=\"remove\">\n        ùòÖ\n      </span>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all employees\r\n  getEmployees: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=10&nat=us\");\r\n  },\r\n};\r\n","import React from \"react\";\n\n// Button component for ascending and descending sort\nfunction Button(props) {\n  return (\n    <div className=\"button\">\n      <button\n        onClick={props.handleButtonClick}\n        type=\"button\"\n        className={props.class}\n      >\n        {props.children}\n      </button>\n    </div>\n  );\n}\n\nexport default Button;\n","import React from \"react\";\r\n\r\n// Input with onchange to filter\r\nfunction SearchForm(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <form onSubmit={props.filterEmployees}>\r\n            <input\r\n              onChange={props.handleOnChange}\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              placeholder=\"Search by name\"\r\n              value={props.filter}\r\n              name=\"filter\"\r\n            ></input>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchForm;\r\n","import React, { Component } from 'react'\nimport FriendCard from './components/FriendCard'\nimport Wrapper from './components/Wrapper'\nimport Title from './components/Title'\nimport API from './utils/API.js'\nimport Button from './components/buttons/button'\nimport SearchForm from './components/buttons/SearchForm'\n\nclass App extends Component {\n  // Setting this.state.employees to the employees json array\n  state = {\n    employees: [],\n    filter: '',\n  }\n\n  componentDidMount() {\n    // After page load, make the API call\n    API.getEmployees().then((results) => {\n      this.setState({\n        employees: results.data.results,\n      })\n    })\n  }\n\n  // Function to sort by first name, alphabetical in ascending order\n  sortEmployees = (employees) => {\n    const employeeSort = [...employees]\n    employeeSort.sort(function (a, b) {\n      if (a.name.first.toLowerCase() < b.name.first.toLowerCase()) return -1\n      if (a.name.first.toLowerCase() > b.name.first.toLowerCase()) return 1\n      return 0\n    })\n    this.setState({ employees: employeeSort })\n  }\n\n  // Button Click to call sort function\n  handleButtonClick = (event) => {\n    event.preventDefault()\n    this.sortEmployees(this.state.employees)\n  }\n\n  // Function to sort by first name, alphabetical in descending order\n  sortReverseEmployees = (employees) => {\n    const employeeSort = [...employees]\n    employeeSort.sort(function (a, b) {\n      if (a.name.first.toLowerCase() > b.name.first.toLowerCase()) return -1\n      if (a.name.first.toLowerCase() < b.name.first.toLowerCase()) return 1\n      return 0\n    })\n    this.setState({ employees: employeeSort })\n  }\n\n  // Button Click to call sort function reverse\n  handleButtonClick2 = (event) => {\n    event.preventDefault()\n    this.sortReverseEmployees(this.state.employees)\n  }\n\n  // onchange to set into state from input\n  handleOnChange = (event) => {\n    const value = event.target.value\n    const name = event.target.name\n    this.setState({\n      [name]: value,\n    })\n  }\n\n  // Onchange handler to filter employees\n  filterEmployees = (event) => {\n    event.preventDefault()\n    if (!this.state.filter) {\n      return\n    }\n    const filtered = this.state.employees.filter(\n      (employee) =>\n        employee.name.first.toLowerCase() === this.state.filter.toLowerCase() ||\n        employee.name.last.toLowerCase() === this.state.filter.toLowerCase()\n    )\n    this.setState({ employees: filtered })\n  }\n\n  // onclick to remove employeees\n  removeEmployee = (id) => {\n    // Filter this.state.employees for employees with an id not equal to the id being removed\n    const employees = this.state.employees.filter(\n      (employee) => employee.login.uuid !== id\n    )\n    // Set this.state.employees equal to the new employees array\n    this.setState({ employees })\n  }\n\n  // Map over this.state.employees and render a FriendCard component for each employee object\n  render() {\n    return (\n      <Wrapper>\n        <Button\n          handleButtonClick={this.handleButtonClick}\n          class='btn btn-light'>\n          Sort Ascending\n        </Button>\n        <Button\n          handleButtonClick={this.handleButtonClick2}\n          class='btn btn-dark'>\n          Sort Descending\n        </Button>\n        <Title>Employees Directory</Title>\n        <SearchForm\n          handleOnChange={this.handleOnChange}\n          filter={this.state.filter}\n          filterEmployees={this.filterEmployees}\n        />\n        {this.state.employees.map((employee) => (\n          <FriendCard\n            removeEmployee={this.removeEmployee}\n            id={employee.login.uuid}\n            key={employee.login.uuid}\n            name={employee.name.first + ' ' + employee.name.last}\n            image={employee.picture.medium}\n            email={employee.email}\n            location={\n              employee.location.street.number +\n              ' ' +\n              employee.location.street.name +\n              ', ' +\n              employee.location.city +\n              ', ' +\n              employee.location.state +\n              ' ' +\n              employee.location.postcode\n            }\n          />\n        ))}\n      </Wrapper>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}